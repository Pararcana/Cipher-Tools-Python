ciphertext = "VRDPK RWFAO MMPRZ EVEWE UTCOP LHTAT GELUI ITOAT XEZRV NRTTF HUDDB TBOAT AIVRD PKRWW USAOU MKSWI RNEDR YLHWC ZRTAF OGEFO WDLHI OVTAO SEYFL HQCYM AIASB OVIGG QNCAB TDVBT WETOA TWEIO XTGRW OGNFF KCTLR TNAWD AOKAV EGEAO QMQNT AWIFN BOBIV SZEPE DOQMG NFAXT PREEJ RTOXP BOIEZ RTNKW BRZBF FRRDD YYQNH OLHJR ATHEZ EPEDO QMGNT OATME VRQXR RFOLD NNPRM MJCVI WEIOZ TVRPW LHCCP PKCRT VIIOY REETD UUKRV ESSMT ZRVNR TDWRA BFBIL HCAUH AEVIT CEEWS VIHSI EDDQN DPAWK RLHZR CSTOL DUSJO VEEYV RQWGN TIATG ELUII HHQDQ OVHKI FENUH TQCYM AIASB ONAAE FFKCT LRTVI HSZIH EZBAT PEWEG SFNPL RARNL DYNBO RDVNP TSAHD KCHDW DPOCU OLLAR AKGVR LSBAT LZSQM GNHUH DTRJO VETOA TGEBO LSLRV CWIBN YFLHG SNUVE DPVIE TOIAH VHMUX ELHNF JRWTH EKITA HEPEG EKTKI LAJLD PAWVR ODMAD PNFLT SKQNA TKEFR PWPHZ NVIVI OGGNL HRAEE GPJOL IHEBE GCWLR EVTJO VETFK RLHVI LSLAL LBTBO TOIOE RXEKW BRTOC CZVER MSQNV ERNTA AHLHT LNGAT IOWSN AWDLH VILSL ALLBT BONAP DIAGN RENAG CTOAT PEOIA HVHMU PEMAH PXTMA REOGR NHSGU HPNAJ DREVE TAFOV SAIAG AIHEI OFRJW CABTD VBTWE SAAWU ECUEP HEATF ESAXE LHVHX LWEKG RNRRH TJRAT TAAWG PQOLU HERAM EHDGN KILAH TATGO WEPEG EXTID FOATP EOIAH VHMUW EHOHH LTPPV RPPKR USNAF BGPQO LUHEE EASJL EWATI OKTIA ASTNM SHSKI WIGNL HYYVR UDDIR EZBPA IAFRX FXTMA REOGR NDSQO TAHEH DTEVI ATVEQ OYKHF PLDAB OPHWL FBRNT AAHLH TLNGA TIOWS REOGR NFRAO GMJCT OATRE WOWSN AKDEE MTLHN YFRXD GCAIG MKFPL EDRYL HFRMC SSQNA TTADW KILHU SPAWE AIUML SKARE ZBRNO IIHIO JRTFK RLHJC LUVNT NTOAT PEOIA HVHMU QECAP HRNPR BIWSQ ELSHH GTGOM UXPKC BOZSV AFEIE NNFRM UHEMA BOZGL HZLCC DLDWQ OBOBT HNXEP OPEMI ZVATT AIORR VCDIB IMISS VRGSQ MVHNW PETAH EHTAT PEOIA HVHMU EEQNA TQEVI WEBIA IWABO HDKRP OLEZO WDLHL HVAKY CAPHR NPRQC INVEB TTNAT QEJOQ EREHT YFLHM MKSDI JEJLD WIETL GNHOL HUITP TRTEB TMBQE HOWIB NRFQY XTZRI OWSPL VCZRC CNLHH XRWEA TFRAU AHLHE WVRAS BTVSN INFWC ELHTQ CBMVR LHQNA TTAAT ZERAW IMUPP KRGSY FLHMM JCVIG ENAQC NMVIX EDOFR XDGCN ARYPH TNPAG POOJC VINGG UNAAT IONGT TQNCY BTVTA OJPXT ESFOS EZVKR PHUSA OJPXT VRNMR OMILS LHDVA SBOTO ATGEI OGNWE GSQFJ OPECA XEHHH TFFMM JCVIA EPHJC CCTNP OCEBO PDVEG ELAWC LLBTB OHTAT EENNJ LASGS YFLHV VLSUS VRHEG SNFSN FOMMB TBOAT TABNY WFRKS ATAEF OOLZB ATQEZ ICAPL TOXTP LXGPA FHIOJ RTTKF TAGSN UVEDP VIATV AFEIE NNMBX ESOMX ZLBIA TEEGD BIWIN NPLRN XRNYF RDVHD EDRYL HRNCW REVET AFOLS ROIOM BXELH QCBMN UVIVG KOVET OATEE NNJLB TCCPL TNVIE EQNRA REKOB APLHT GPQOW ELSEW GCSAM MLNXT PLXGM AASGN LHSSQ MBTQM MUVIZ GLHLS TAAIB TCCEL GEUHY IYUHS WIRNV EHEZB BBCBG AEEQN VNNGB TTNLA EEQNI AHDED RYLHD PAWFR YFLHH DDVGC ATQEG OLTGE LUPEC YPNXI LHVRP DWESS KGQSM IOLAT MEJRG EVRLT GPJOL IVIOG GNPET LKGPN FECEB ODDLN ATVIZ GHHVT IOOLF BSAGC KRIAR NEDCY ZVGNL HLLXR WEGTX EKWBR TOGAR ELTDW TIXEP HESWU PHYSC ODDQN HTFBG CPLSB TAHEA TVEME SSDLP ODARN OWIIP MAIPA DPVIX TWDFO TEFOM THHMT LHDAL DBTBO LAJVF LQMTO KTFAN FQCGN LHXTP LXGPA FHRNP TFOKK QNATM EPNVR SAHER RXTTA DWKID HLEVA FEIEN NMBXE ROGEX ILHKR VHWSQ MKSGA WEHHK SKTXE JCHEA TEEJB TLRTT OIODR GOITK OVEZF PLTNV IXELH TFHUD DBTBO MMJCV IXEGO JUDPK RATEE NNJLL SASGN LHZIK WBRSA RAWEF UPTVE AINKF RJWVI OGVNS NFOMM BTBOA WCCAN HOMUA ELEVA VEEEJ CHEAT PEUIB IGSBF HHHTR NMMJC VIGEN ARDNA LDBFE EVRHT MMOKA TQEGO HTYFP HFSAE PBHUR TATRE AWEWW LRNHE HTTLX NWSZV RRTLG NLHZI QCBMN UTAWI FNGSA TTAAT CECCN NNNJL WSNAU DTEFO PTHHM TLHDY VIDDX SSATT LSLHQ MKSGA WEQFK OATAI EWWLV RKQZI EERNB NDRIO ASPNV RSAME BNLUG PROWU BTBOT OPEGE KTKIB IUYPH JCCCA NHOFB CAPHZ EHEZB QCNMM UBTBO EWATI OTTLL XRMEP NVRSA MEGNL HQCFN GUIPW IBNKF YUELL HQCLS KWFUE DTEFR PHJBB TZVVB XTZVV NNFVT IOOLF BQMMT LHQCI RWEDP QNVIO GPNVR SAMEG NLHGP ROWUB TBOTO LHTAN AQDWO WSKWF UEDYE YNSIP ERYSO USPAE EMTRE BTBOZ EREBO ATAET IQDFO ATEEL SQCSA BTBFE EVRHT VRLAA ISELU ZFWLM AJBBT BOOSR EIEWD TOVID DAMVR VRAMX TZLCC BTBOE WATRA EEBDG SLUGC TODPA WVRLD GSFNK WBRTA PAAPX EBOZS KOYSV RTAGP AOAIE EQNBI PHXNS IBNPW LHLIE EWLQO TAWIG NPOCU OLBIM MPRZE VEWEU TCOPL"
import random
from trigrams import trigrams

alpha = list("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
distribution = [
  8.55, 1.60, 3.16, 3.87, 12.10, 2.18, 2.09, 4.96, 7.33, 0.22, 0.81, 4.21, 2.53,
  7.17, 7.47, 2.07, 0.10, 6.33, 6.73, 8.94, 2.68, 1.06, 1.83, 0.19, 1.72, 0.11
]

ciphertext = [v for v in ciphertext if v in alpha]
bin = {False: 0, True: 1}
options = [i for i in range(26)]

key = random.choices([i for i in range(26)], k=4)

def fitness(arr):
  difference = []
  arrLen = len(arr)
  for v in alpha:
    difference.append(arr.count(v) / arrLen * 100)

  total = 0
  for i, v in enumerate(difference):
    total += abs(distribution[i] - v)
  return total

def solve(key):
  ans = []
  for i in range(0, len(ciphertext), 2):
    x = alpha.index(ciphertext[i])
    y = alpha.index(ciphertext[i+1])
    for i in range(2):
      ans.append(alpha[(key[2*i] * x + key[2*i + 1] * y) % 26])
  return "".join(ans)

stability = 0
parity = random.choice([True, False])
while stability != 5:
  parity = not parity
  testKey = key.copy()
  fitnessArr = [[], [], []]

  for x in options:
    for y in options:
      testKey[2*bin[parity]] = x
      testKey[2*bin[parity] + 1] = y
      buffer = solve(testKey)
  
      fitnessArr[0].append(buffer)
      fitnessArr[1].append(fitness(buffer))
      fitnessArr[2].append(testKey.copy())

  best = fitnessArr[1].index(min(fitnessArr[1]))
  print("".join(fitnessArr[0][best]) + "\n\n")
  print(fitnessArr[1][best])

  stability = (fitnessArr[2][best] == key and stability + 1 or 0)
  key = fitnessArr[2][best]

  print(stability)
  print(key)

plaintext = solve(key)
print(fitness(plaintext))
print(plaintext)
